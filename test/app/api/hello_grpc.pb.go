// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/hello.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HelloGreeter_SayHello_FullMethodName = "/hello.v1.HelloGreeter/SayHello"
)

// HelloGreeterClient is the client API for HelloGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloGreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloGreeterSayHelloRequest, opts ...grpc.CallOption) (*HelloGreeterSayHelloResponse, error)
}

type helloGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloGreeterClient(cc grpc.ClientConnInterface) HelloGreeterClient {
	return &helloGreeterClient{cc}
}

func (c *helloGreeterClient) SayHello(ctx context.Context, in *HelloGreeterSayHelloRequest, opts ...grpc.CallOption) (*HelloGreeterSayHelloResponse, error) {
	out := new(HelloGreeterSayHelloResponse)
	err := c.cc.Invoke(ctx, HelloGreeter_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloGreeterServer is the server API for HelloGreeter service.
// All implementations must embed UnimplementedHelloGreeterServer
// for forward compatibility
type HelloGreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloGreeterSayHelloRequest) (*HelloGreeterSayHelloResponse, error)
	mustEmbedUnimplementedHelloGreeterServer()
}

// UnimplementedHelloGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedHelloGreeterServer struct {
}

func (UnimplementedHelloGreeterServer) SayHello(context.Context, *HelloGreeterSayHelloRequest) (*HelloGreeterSayHelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedHelloGreeterServer) mustEmbedUnimplementedHelloGreeterServer() {}

// UnsafeHelloGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloGreeterServer will
// result in compilation errors.
type UnsafeHelloGreeterServer interface {
	mustEmbedUnimplementedHelloGreeterServer()
}

func RegisterHelloGreeterServer(s grpc.ServiceRegistrar, srv HelloGreeterServer) {
	s.RegisterService(&HelloGreeter_ServiceDesc, srv)
}

func _HelloGreeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloGreeterSayHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloGreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelloGreeter_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloGreeterServer).SayHello(ctx, req.(*HelloGreeterSayHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HelloGreeter_ServiceDesc is the grpc.ServiceDesc for HelloGreeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloGreeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hello.v1.HelloGreeter",
	HandlerType: (*HelloGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _HelloGreeter_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/hello.proto",
}

const (
	HelloIdentity_ServerVersion_FullMethodName = "/hello.v1.HelloIdentity/ServerVersion"
)

// HelloIdentityClient is the client API for HelloIdentity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloIdentityClient interface {
	// Gets server version
	ServerVersion(ctx context.Context, in *HelloIdentityVersionRequest, opts ...grpc.CallOption) (*HelloIdentityVersionResponse, error)
}

type helloIdentityClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloIdentityClient(cc grpc.ClientConnInterface) HelloIdentityClient {
	return &helloIdentityClient{cc}
}

func (c *helloIdentityClient) ServerVersion(ctx context.Context, in *HelloIdentityVersionRequest, opts ...grpc.CallOption) (*HelloIdentityVersionResponse, error) {
	out := new(HelloIdentityVersionResponse)
	err := c.cc.Invoke(ctx, HelloIdentity_ServerVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloIdentityServer is the server API for HelloIdentity service.
// All implementations must embed UnimplementedHelloIdentityServer
// for forward compatibility
type HelloIdentityServer interface {
	// Gets server version
	ServerVersion(context.Context, *HelloIdentityVersionRequest) (*HelloIdentityVersionResponse, error)
	mustEmbedUnimplementedHelloIdentityServer()
}

// UnimplementedHelloIdentityServer must be embedded to have forward compatible implementations.
type UnimplementedHelloIdentityServer struct {
}

func (UnimplementedHelloIdentityServer) ServerVersion(context.Context, *HelloIdentityVersionRequest) (*HelloIdentityVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerVersion not implemented")
}
func (UnimplementedHelloIdentityServer) mustEmbedUnimplementedHelloIdentityServer() {}

// UnsafeHelloIdentityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloIdentityServer will
// result in compilation errors.
type UnsafeHelloIdentityServer interface {
	mustEmbedUnimplementedHelloIdentityServer()
}

func RegisterHelloIdentityServer(s grpc.ServiceRegistrar, srv HelloIdentityServer) {
	s.RegisterService(&HelloIdentity_ServiceDesc, srv)
}

func _HelloIdentity_ServerVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloIdentityVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloIdentityServer).ServerVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelloIdentity_ServerVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloIdentityServer).ServerVersion(ctx, req.(*HelloIdentityVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HelloIdentity_ServiceDesc is the grpc.ServiceDesc for HelloIdentity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloIdentity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hello.v1.HelloIdentity",
	HandlerType: (*HelloIdentityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServerVersion",
			Handler:    _HelloIdentity_ServerVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/hello.proto",
}
