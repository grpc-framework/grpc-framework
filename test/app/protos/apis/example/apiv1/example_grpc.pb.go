// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: apis/example/apiv1/example.proto

package example

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExampleGreeter_SayExample_FullMethodName = "/hello.example.v1.ExampleGreeter/SayExample"
)

// ExampleGreeterClient is the client API for ExampleGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExampleGreeterClient interface {
	// Sends a greeting
	SayExample(ctx context.Context, in *ExampleGreeterSayExampleRequest, opts ...grpc.CallOption) (*ExampleGreeterSayExampleResponse, error)
}

type exampleGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewExampleGreeterClient(cc grpc.ClientConnInterface) ExampleGreeterClient {
	return &exampleGreeterClient{cc}
}

func (c *exampleGreeterClient) SayExample(ctx context.Context, in *ExampleGreeterSayExampleRequest, opts ...grpc.CallOption) (*ExampleGreeterSayExampleResponse, error) {
	out := new(ExampleGreeterSayExampleResponse)
	err := c.cc.Invoke(ctx, ExampleGreeter_SayExample_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExampleGreeterServer is the server API for ExampleGreeter service.
// All implementations must embed UnimplementedExampleGreeterServer
// for forward compatibility
type ExampleGreeterServer interface {
	// Sends a greeting
	SayExample(context.Context, *ExampleGreeterSayExampleRequest) (*ExampleGreeterSayExampleResponse, error)
	mustEmbedUnimplementedExampleGreeterServer()
}

// UnimplementedExampleGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedExampleGreeterServer struct {
}

func (UnimplementedExampleGreeterServer) SayExample(context.Context, *ExampleGreeterSayExampleRequest) (*ExampleGreeterSayExampleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayExample not implemented")
}
func (UnimplementedExampleGreeterServer) mustEmbedUnimplementedExampleGreeterServer() {}

// UnsafeExampleGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExampleGreeterServer will
// result in compilation errors.
type UnsafeExampleGreeterServer interface {
	mustEmbedUnimplementedExampleGreeterServer()
}

func RegisterExampleGreeterServer(s grpc.ServiceRegistrar, srv ExampleGreeterServer) {
	s.RegisterService(&ExampleGreeter_ServiceDesc, srv)
}

func _ExampleGreeter_SayExample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExampleGreeterSayExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleGreeterServer).SayExample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleGreeter_SayExample_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleGreeterServer).SayExample(ctx, req.(*ExampleGreeterSayExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExampleGreeter_ServiceDesc is the grpc.ServiceDesc for ExampleGreeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExampleGreeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hello.example.v1.ExampleGreeter",
	HandlerType: (*ExampleGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayExample",
			Handler:    _ExampleGreeter_SayExample_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/example/apiv1/example.proto",
}

const (
	ExampleIdentity_ServerVersion_FullMethodName = "/hello.example.v1.ExampleIdentity/ServerVersion"
)

// ExampleIdentityClient is the client API for ExampleIdentity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExampleIdentityClient interface {
	// Gets server version
	ServerVersion(ctx context.Context, in *ExampleIdentityVersionRequest, opts ...grpc.CallOption) (*ExampleIdentityVersionResponse, error)
}

type exampleIdentityClient struct {
	cc grpc.ClientConnInterface
}

func NewExampleIdentityClient(cc grpc.ClientConnInterface) ExampleIdentityClient {
	return &exampleIdentityClient{cc}
}

func (c *exampleIdentityClient) ServerVersion(ctx context.Context, in *ExampleIdentityVersionRequest, opts ...grpc.CallOption) (*ExampleIdentityVersionResponse, error) {
	out := new(ExampleIdentityVersionResponse)
	err := c.cc.Invoke(ctx, ExampleIdentity_ServerVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExampleIdentityServer is the server API for ExampleIdentity service.
// All implementations must embed UnimplementedExampleIdentityServer
// for forward compatibility
type ExampleIdentityServer interface {
	// Gets server version
	ServerVersion(context.Context, *ExampleIdentityVersionRequest) (*ExampleIdentityVersionResponse, error)
	mustEmbedUnimplementedExampleIdentityServer()
}

// UnimplementedExampleIdentityServer must be embedded to have forward compatible implementations.
type UnimplementedExampleIdentityServer struct {
}

func (UnimplementedExampleIdentityServer) ServerVersion(context.Context, *ExampleIdentityVersionRequest) (*ExampleIdentityVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerVersion not implemented")
}
func (UnimplementedExampleIdentityServer) mustEmbedUnimplementedExampleIdentityServer() {}

// UnsafeExampleIdentityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExampleIdentityServer will
// result in compilation errors.
type UnsafeExampleIdentityServer interface {
	mustEmbedUnimplementedExampleIdentityServer()
}

func RegisterExampleIdentityServer(s grpc.ServiceRegistrar, srv ExampleIdentityServer) {
	s.RegisterService(&ExampleIdentity_ServiceDesc, srv)
}

func _ExampleIdentity_ServerVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExampleIdentityVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleIdentityServer).ServerVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleIdentity_ServerVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleIdentityServer).ServerVersion(ctx, req.(*ExampleIdentityVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExampleIdentity_ServiceDesc is the grpc.ServiceDesc for ExampleIdentity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExampleIdentity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hello.example.v1.ExampleIdentity",
	HandlerType: (*ExampleIdentityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServerVersion",
			Handler:    _ExampleIdentity_ServerVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/example/apiv1/example.proto",
}
