{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to grpc-framework","text":"<p>The grpc-framework enables Golang developers to create secure gRPC applications easily. The project provides developers with the following features:</p> <ul> <li>Generate REST and swagger APIs</li> <li>Generate Markdown documentation</li> <li>Security<ul> <li>Authentication (OIDC and JWT supported)</li> <li>Authorization (RBAC / Role Based Access Control)</li> <li>TLS support</li> <li>Auditing</li> </ul> </li> <li>Rate Limiter</li> <li>Metrics for Prometheus</li> <li>API Logging</li> <li>proto/gRPC build container</li> <li>And more...</li> </ul>"},{"location":"#usage","title":"Usage","text":"<p>To add the library to your Golang application use the following command:</p> <pre><code>go get github.com/libopenstorage/grpc-framework@latest\n</code></pre> <p>Also, use the following container version on your builds:</p> <pre><code>quay.io/openstorage/grpc-framework:latest\n</code></pre> <p>Here is an example:</p> <pre><code>PROTO_FILE = ./api/hello.proto\n\nproto:\n    docker run \\\n        --privileged --rm \\\n        -v $(shell pwd):/go/src/code \\\n        -e \"GOPATH=/go\" \\\n        -e \"DOCKER_PROTO=yes\" \\\n        -e \"PROTO_USER=$(shell id -u)\" \\\n        -e \"PROTO_GROUP=$(shell id -g)\" \\\n        -e \"PATH=/bin:/usr/bin:/usr/local/bin:/go/bin:/usr/local/go/bin\" \\\n        quay.io/openstorage/grpc-framework \\\n            make docker-proto\n\ndocker-proto:\nifndef DOCKER_PROTO\n    $(error Do not run directly. Run 'make proto' instead.)\nendif\n    grpcfw $(PROTO_FILE)\n    grpcfw-rest $(PROTO_FILE)\n    grpcfw-doc $(PROTO_FILE)\n</code></pre> <p>We are working on a tutorial, but in the meantime, please check out the example test program.</p>"},{"location":"#projects-used","title":"Projects Used","text":"<p>grpc-framework uses the following excellent projects in the framework:</p> <ul> <li>gRPC Golang</li> <li>gRPC REST Gateway</li> <li>Golang JWT</li> <li>Logging with logrus</li> <li>Generate Markdown documentation</li> </ul>"},{"location":"about/","title":"About","text":"<p>The software was first created for our OpenStorage project, but we then decided to make it its own separate framework so that other projects can use it easily.</p> <p>See also: KubeCon 2019 San Diego / Securing Your Services with Authentication, Authorization, and RBAC in gRPC</p>"},{"location":"intro/","title":"Introduction","text":"<p>The following will guide through some of the features provided by this framework</p>"},{"location":"intro/#containerize-tools","title":"Containerize tools","text":"<p>The framework provides the latest tools for generating gRPC as a single container called <code>quay.io/openstorage/grpc-framework</code>. Here is a sample set of targets for a <code>Makefile</code> on how the container can be used to generate gRPC code from your protocol buffer files.</p> <pre><code>PROTO_FILE = ./api/hello.proto\n\nproto:\n    docker run \\\n        --privileged --rm \\\n        -v $(shell pwd):/go/src/code \\\n        -e \"GOPATH=/go\" \\\n        -e \"DOCKER_PROTO=yes\" \\\n        -e \"PROTO_USER=$(shell id -u)\" \\\n        -e \"PROTO_GROUP=$(shell id -g)\" \\\n        -e \"PATH=/bin:/usr/bin:/usr/local/bin:/go/bin:/usr/local/go/bin\" \\\n        quay.io/openstorage/grpc-framework \\\n            make docker-proto\n\ndocker-proto:\nifndef DOCKER_PROTO\n    $(error Do not run directly. Run 'make proto' instead.)\nendif\n    grpcfw $(PROTO_FILE)\n    grpcfw-rest $(PROTO_FILE)\n    grpcfw-doc $(PROTO_FILE)\n</code></pre> <p>The framework provides a set of <code>grpcfw*</code> programs in a container, to help with the generation of the sources from the protocol buffers file.</p>"},{"location":"intro/#generate-rest-and-swagger-apis","title":"Generate REST and swagger APIs","text":"<p>The framework utilizes the grpc-gateway to generate a REST interface for your application. The framework will setup and start the HTTP server and automatically connect it to your gRPC server. The REST APIs will be served by the HTTP server which are then forwared to the gRPC server to be handled.</p> <p>The framework will also generate a swagger API file which can be provided to REST client developers.</p> <p>The following is an example of how a gRPC service can be used from a REST client.</p> <pre><code>// The greeting service definition.\nservice HelloGreeter {\n  // Sends a greeting\n  rpc SayHello (HelloGreeterSayHelloRequest)\n    returns (HelloGreeterSayHelloResponse) {\n      option(google.api.http) = {\n        post: \"/v1/greeter/sayhello\"\n        body: \"*\"\n      };\n  }\n}\n\n// The request message containing the user's name.\nmessage HelloGreeterSayHelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloGreeterSayHelloResponse {\n  string message = 1;\n}\n</code></pre> <p>Here, the grpc-gateway would use the information located in the option(google.api.http) section of your gRPC rpc to generate a REST call. To enable the REST server for your application, you would need to enable it in your configuration:</p> <pre><code>import(\n    \"github.com/libopenstorage/grpc-framework/server\"\n)\n...\n    grpcConfig := &amp;server.ServerConfig{\n        Name:         \"hello\",\n        Address:      \"127.0.0.1:9009\",\n        Socket:       \"/tmp/hello-server.sock\",\n        AuditOutput:  os.Stdout,\n        AccessOutput: os.Stdout,\n    }\n    restPort := \"9010\"\n    grpcConfig.WithDefaultRestServer(restPort)\n...\n</code></pre> <p>Once the server is started, you can then use a REST client to send commands to your application:</p> <pre><code>$ curl  -X POST -d '{ \"name\": \"Luis\" }' \\\n    --silent http://localhost:9010/v1/greeter/sayhello | jq\n{\n  \"message\": \"Hello, Luis\"\n}\n</code></pre>"},{"location":"intro/#generate-markdown-documentation","title":"Generate Markdown documentation","text":"<p>The framework also provides protoc-doc to generate Markdown documentation from the comments on your protocol buffers files.</p>"},{"location":"intro/#security","title":"Security","text":"<p>The framework makes it simple to add authentication, authorization, and TLS to secure your application. Authentication and RBAC authorization are provided by a set of interceptors in the gRPC server.</p>"},{"location":"intro/#authentication-oidc-and-jwt-supported","title":"Authentication (OIDC and JWT supported)","text":"<p>The framework support shared secret, public-private key, or OpenID Connect authentication models.</p>"},{"location":"intro/#authorization","title":"Authorization","text":"<p>The framework provides (RBAC) role based access control for gRPC services as well as a generic resource authorization model.</p>"},{"location":"intro/#tls-support","title":"TLS support","text":"<p>The framework provides TLS server support.</p>"},{"location":"intro/#auditing","title":"Auditing","text":"<p>The framework logs access to the APIs by recording identifying information read from the authentication token of the caller. This is done by an interceptor that is automatically installed by the framework when authentication is enabled on the gRPC server.</p>"},{"location":"intro/#rate-limiter","title":"Rate Limiter","text":"<p>The framework provides rate limiter support with a plan for future releases tor provide the rate limit per user.</p>"},{"location":"intro/#metrics-for-prometheus","title":"Metrics for Prometheus","text":"<p>Support for Prometheus is provided by go-grpc-prometheus.</p>"},{"location":"intro/#api-logging","title":"API Logging","text":"<p>Like auditing, a logging interceptor is provided which can provide rountrip information for API services.</p>"},{"location":"intro/#protogrpc-build-container","title":"proto/gRPC build container","text":"<p>All tools and updated libraries are all provided by a container to make it simple to utilize on your projects.</p>"},{"location":"reference/gen-doc/","title":"Generate Documentation","text":""},{"location":"reference/hello.pb/","title":"gRPC API Reference","text":""},{"location":"reference/hello.pb/#contents","title":"Contents","text":"<ul> <li> <p>Services</p> <ul> <li>HelloGreeter</li> <li>HelloIdentity</li> </ul> </li> <li> <p>Messages</p> <ul> <li>HelloGreeterSayHelloRequest</li> <li>HelloGreeterSayHelloResponse</li> <li>HelloIdentityVersionRequest</li> <li>HelloIdentityVersionResponse</li> <li>HelloVersion</li> </ul> </li> <li> <p>Scalar Value Types</p> </li> </ul>"},{"location":"reference/hello.pb/#servicehellohellogreeter","title":"HelloGreeter","text":"<p>The greeting service definition.</p>"},{"location":"reference/hello.pb/#methodhellohellogreetersayhello","title":"SayHello","text":"<p>rpc SayHello(HelloGreeterSayHelloRequest)     HelloGreeterSayHelloResponse</p> <p>Sends a greeting   </p>"},{"location":"reference/hello.pb/#servicehellohelloidentity","title":"HelloIdentity","text":""},{"location":"reference/hello.pb/#methodhellohelloidentityversion","title":"Version","text":"<p>rpc Version(HelloIdentityVersionRequest)     HelloIdentityVersionResponse</p>"},{"location":"reference/hello.pb/#messages","title":"Messages","text":""},{"location":"reference/hello.pb/#hellogreetersayhellorequest","title":"HelloGreeterSayHelloRequest","text":"<p>The request message containing the user's name.</p> Field Type Description name  string none"},{"location":"reference/hello.pb/#hellogreetersayhelloresponse","title":"HelloGreeterSayHelloResponse","text":"<p>The response message containing the greetings</p> Field Type Description message  string none"},{"location":"reference/hello.pb/#helloidentityversionrequest","title":"HelloIdentityVersionRequest","text":"<p>Empty request</p>"},{"location":"reference/hello.pb/#helloidentityversionresponse","title":"HelloIdentityVersionResponse","text":"<p>Defines the response to version</p> Field Type Description hello_version  HelloVersion Hello application version"},{"location":"reference/hello.pb/#helloversion","title":"HelloVersion","text":"<p>Hello version in Major.Minor.Patch format. The goal of this message is to provide clients a method to determine the server and client versions.</p> Field Type Description major  int32 Version major number minor  int32 Version minor number patch  int32 Version patch number version  string String representation of the version. Must be in <code>major.minor.patch</code> format."},{"location":"reference/hello.pb/#enums","title":"Enums","text":""},{"location":"reference/hello.pb/#helloversionversion","title":"HelloVersion.Version","text":"<p>These values are constants that can be used by the client and server applications</p> Name Number Description MUST_HAVE_ZERO_VALUE 0 Must be set in the proto file; ignore. MAJOR 0 Version major value of this specification MINOR 0 Version minor value of this specification PATCH 1 Version patch value of this specification"},{"location":"reference/hello.pb/#scalar-value-types","title":"Scalar Value Types","text":".proto Type Notes C++ Type Java Type Python Type  double double double float  float float float float  int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int  int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long  uint32 Uses variable-length encoding. uint32 int int/long  uint64 Uses variable-length encoding. uint64 long int/long  sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int  sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long  fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int  fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long  sfixed32 Always four bytes. int32 int int  sfixed64 Always eight bytes. int64 long int/long  bool bool boolean boolean  string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode  bytes May contain any arbitrary sequence of bytes. string ByteString str"},{"location":"reference/hello.pb/#double","title":"Example Generated documentation","text":""},{"location":"reference/hello.pb/#float","title":"Example Generated documentation","text":""},{"location":"reference/hello.pb/#int32","title":"Example Generated documentation","text":""},{"location":"reference/hello.pb/#int64","title":"Example Generated documentation","text":""},{"location":"reference/hello.pb/#uint32","title":"Example Generated documentation","text":""},{"location":"reference/hello.pb/#uint64","title":"Example Generated documentation","text":""},{"location":"reference/hello.pb/#sint32","title":"Example Generated documentation","text":""},{"location":"reference/hello.pb/#sint64","title":"Example Generated documentation","text":""},{"location":"reference/hello.pb/#fixed32","title":"Example Generated documentation","text":""},{"location":"reference/hello.pb/#fixed64","title":"Example Generated documentation","text":""},{"location":"reference/hello.pb/#sfixed32","title":"Example Generated documentation","text":""},{"location":"reference/hello.pb/#sfixed64","title":"Example Generated documentation","text":""},{"location":"reference/hello.pb/#bool","title":"Example Generated documentation","text":""},{"location":"reference/hello.pb/#string","title":"Example Generated documentation","text":""},{"location":"reference/hello.pb/#bytes","title":"Example Generated documentation","text":""},{"location":"reference/intro/","title":"Reference","text":""},{"location":"reference/rate-limiter/","title":"Rate Limiter","text":""},{"location":"reference/rest/","title":"REST","text":""},{"location":"reference/style-guide/","title":"Protocol Buffer Style Guide","text":"<p>Please first read Google's Protocol Buffer Style Guide:</p> <p>Quote</p> <p>This document provides a style guide for <code>.proto</code> files. By following these conventions, you'll make your protocol buffer message definitions and their corresponding classes consistent and easy to read. Note that protocol buffer style has evolved over time, so it is likely that you will see <code>.proto</code> files written in different conventions or styles. Please respect the existing style when you modify these files. Consistency is key. However, it is best to adopt the current best style when you are creating a new <code>.proto</code>file.</p> <p>The following documentation is provided as a set of guidelines to help you in your gRPC APIs.</p>"},{"location":"reference/style-guide/#types","title":"Types","text":"<ul> <li><code>string</code> types should be used only for ids, messages, or opaque values. They are not meant to marshal information as a <code>yaml</code>. Instead create a concrete message.</li> <li>Only use <code>map&lt;string, string&gt;</code> for opaque values like labels, key-value pairs, etc. Do not use them for operations. Use enums instead.</li> <li>Value options should not be passed as <code>string</code>. Instead of passing \"Done\", or \"paused\", use enums for these value, making it clear to the reader.</li> <li>Try not to use <code>uint64</code>. Instead try to use signed <code>int64</code>. (See CSI #172)</li> </ul>"},{"location":"reference/style-guide/#services","title":"Services","text":"<ul> <li>See CSI as an example.</li> <li>Use Camelcase</li> <li>Services should be in the format <code>AppName&lt;Service Name&gt;</code>.</li> <li>Note that the service is a collection of APIs and are grouped as such in the documentation.<ul> <li>Here is an example for OpenStorageVolume</li> </ul> </li> </ul>"},{"location":"reference/style-guide/#rpcs","title":"RPCs","text":"<ul> <li>All APIs should have a single message for the request and a single message for the response with the following style: <code>[App]&lt;Service Type&gt;&lt;Api Name&gt;Request|Response</code></li> <li>See CSI as an example.</li> <li>RPCs will be created as methods to the service object, therefore there is   no need to add the service name as part of the RPC. For example,   use <code>Foo</code>, or <code>Bar</code> instead or <code>ServiceFoo</code> or <code>ServiceBar</code> as RPC names.</li> </ul>"},{"location":"reference/style-guide/#enums","title":"Enums","text":"<ul> <li>Follow the Google protobuf style for enums</li> <li>According to the Google guide, the enum of zero value should be labeled as <code>UNSPECIFIED</code> to check if it was not set since <code>0</code> is the default value set when the client does not provide it.</li> <li>Wrap enums in messages so that their string values are clearer. Wrapping an enum in a message also has the benefit of not needing to prefix the enums with namespaced information. For example, instead of using the enum <code>XATTR_UNSPECIFIED</code>, the example above uses just <code>UNSPECIFIED</code> since it is inide the <code>Xattr</code> message. The generated code will be namepaced:</li> </ul> <p>Proto:</p> <pre><code>// Xattr defines implementation specific volume attribute\nmessage Xattr {\n  enum Value {\n    // Value is uninitialized or unknown\n    UNSPECIFIED = 0;\n    // Enable on-demand copy-on-write on the volume\n    COW_ON_DEMAND = 1;\n  }\n}\n</code></pre> <p>Using the enum in a Proto</p> <pre><code>message VolumeSpec {\n  // Holds the extended attributes for the volume\n  Xattr.Value xattr = 1;\n}\n</code></pre> <p>Notice the namepaced and string values in the generated output code:</p> <pre><code>type Xattr_Value int32\n\nconst (\n    // Value is uninitialized or unknown\n    Xattr_UNSPECIFIED Xattr_Value = 0\n    // Enable on-demand copy-on-write on the volume\n    Xattr_COW_ON_DEMAND Xattr_Value = 1\n)\n\nvar Xattr_Value_name = map[int32]string{\n    0: \"UNSPECIFIED\",\n    1: \"COW_ON_DEMAND\",\n}\nvar Xattr_Value_value = map[string]int32{\n    \"UNSPECIFIED\":   0,\n    \"COW_ON_DEMAND\": 1,\n}\n\ntypedef VolueSpec struct {\n  // Holds the extended attributes for the volume\n    Xattr Xattr_Value `protobuf:\"varint,36,opt,name=xattr,enum=openstorage.api.Xattr_Value\" json:\"xattr,omitempty\"`\n}\n</code></pre>"},{"location":"reference/style-guide/#messages","title":"Messages","text":"<ul> <li>If at all possible, APIs must be supported forever once released. </li> <li>They will almost never be deprecated since at some point you may have many versions of the clients. So please be clear and careful on the API you create.</li> <li>If we need to change or update, you can always add values.</li> </ul>"},{"location":"reference/style-guide/#field-numbers","title":"Field Numbers","text":"<ul> <li>If it is a new message, start with the field number of <code>1</code>.</li> <li>If it is an addition to a message, continue the field number sequence by one.</li> <li>If you are using <code>oneof</code> you may want to start with a large value for the   field number so that they do not interfere with other values in the message:</li> </ul> <pre><code>  string s3_storage_class = 7;\n\n  // Start at field number 200 to allow for expansion\n  oneof credential_type {\n    // Credentials for AWS/S3\n    SdkAwsCredentialRequest aws_credential = 200;\n    // Credentials for Azure\n    SdkAzureCredentialRequest azure_credential = 201;\n    // Credentials for Google\n    SdkGoogleCredentialRequest google_credential = 202;\n  }\n</code></pre>"},{"location":"reference/style-guide/#deprecation","title":"Deprecation","text":"<p>Here is the process if you would like to deprecate:</p> <ol> <li>According to proto3 Language Guide set the value in the message to deprecated and add a <code>(deprecated)</code> string to the comment as follows:</li> </ol> <pre><code>// (deprecated) Field documentation here\nint32 field = 6 [deprecated = true];\n</code></pre> <ol> <li>Comment in the a changelog that the value is deprecated.</li> <li>Provide at least two releases before removing support for that value in the message. Make sure to document in the release notes of the product the deprecation.</li> <li>Once at least two releases have passed. Reserve the field number as shown in the proto3 Language Guide:</li> </ol> <pre><code>message Foo {\n  reserved 6;\n}\n</code></pre> <p>It is essential that no values override the field number when updating or replacing. From Google's guide:</p> <p>Warning</p> <p>If you update a message type by entirely removing a field, or commenting it out, future users can reuse the field number when making their own updates to the type. This can cause severe issues if they later load old versions of the same .proto, including data corruption, privacy bugs, and so on.</p>"},{"location":"reference/style-guide/#rest","title":"REST","text":"<p>REST endpoints are autogenerated from the protofile by the grpc-gateway protoc compiler. All APIs should add the appropriate information to generate a REST endpoint for their service. Here is an example:</p> <pre><code>  rpc Inspect(RoleInspectRequest)\n    returns (RoleInspectResponse){\n      option(google.api.http) = {\n        get: \"/v1/roles/{name}\"\n      };\n    }\n\n  // Delete an existing role\n  rpc Delete(RoleDeleteRequest)\n    returns (RoleDeleteResponse){\n      option(google.api.http) = {\n        delete: \"/v1/roles/{name}\"\n      };\n    }\n\n  // Update an existing role\n  rpc Update(RoleUpdateRequest)\n    returns (RoleUpdateResponse){\n      option(google.api.http) = {\n        put: \"/v1/roles\"\n        body: \"*\"\n      };\n    }\n</code></pre> <p>Here are the guidelines for REST commands:</p> <ul> <li>Endpoint must be prefixed as follows: <code>/v1/&lt;service name&gt;/&lt;rpc name if needed&gt;/{any variables if needed}</code>.</li> <li>Use the appropriate HTTP method. Here are some guidelines:<ul> <li>For Create RPCs use the <code>post</code> http method</li> <li>For Inspect and List RPCs use the <code>get</code> http method</li> <li>For Update RPCs use the <code>put</code> http method</li> <li>For Delete RPCs use the <code>delete</code> http method</li> </ul> </li> <li>Use <code>get</code> for immutable calls.</li> <li>Use <code>put</code> with <code>body: \"*\"</code> most calls that need to send a message to the SDK server.</li> </ul> <p>Please see grpc-gateway documentation for more information.</p>"},{"location":"reference/style-guide/#documentation","title":"Documentation","text":"<ul> <li> <p>All APIs, messages, and types should be documented if possible. The <code>grpc-framework</code> utilizes protoc-gen-doc to automatically generate documentation from your protocol buffers file.</p> </li> <li> <p>Documenting Messages</p> <ul> <li>Document each value of the message.</li> <li>Do not use Golang style. Do not repeat the name of the variable in Golang Camel Format in the comment to document it since the variable could be in other styles in other languages. For example:</li> </ul> </li> </ul> <pre><code>// Provides volume's exclusive bytes and its total usage. This cannot be\n// retrieved individually and is obtained as part node's usage for a given\n// node.\nmessage VolumeUsage {\n   // id for the volume/snapshot\n  string volume_id = 1;\n  // name of the volume/snapshot\n  string volume_name = 2;\n  // uuid of the pool that this volume belongs to\n  string pool_uuid = 3;\n  // size in bytes exclusively used by the volume/snapshot\n  uint64 exclusive_bytes = 4;\n  //  size in bytes by the volume/snapshot\n  uint64 total_bytes = 5;\n  // set to true if this volume is snapshot created by cloudbackups\n  bool local_cloud_snapshot = 6;\n}\n</code></pre>"},{"location":"reference/style-guide/#here-is-an-example","title":"Here is an example:","text":"<ul> <li>Protocol buffers file: hello.proto</li> <li>Documentation in markdown format: hello.pb.md</li> </ul>"},{"location":"reference/security/audit/","title":"Audit","text":""},{"location":"reference/security/authentication/","title":"Authentication","text":""},{"location":"reference/security/authorization/","title":"Authorization","text":""},{"location":"reference/security/intro/","title":"Security","text":""},{"location":"reference/security/tls/","title":"TLS","text":""},{"location":"tutorial/client/","title":"Tutorial: gRPC Client","text":""},{"location":"tutorial/intro/","title":"Tutorial","text":"<p>This tutorial will guide you to create your sample application on your system.</p> <p>You will need Docker (or complient runtime) and Go installed</p>"},{"location":"tutorial/intro/#container-runtime","title":"Container Runtime","text":""},{"location":"tutorial/intro/#linux","title":"Linux","text":"<p>First, make sure to have a container runtime installed like Docker or podman.</p>"},{"location":"tutorial/intro/#macos","title":"MacOS","text":"<p>If you use a MacOS system, then it is recommended to use Docker Desktop.</p>"},{"location":"tutorial/intro/#windows","title":"Windows","text":"<p>If you use Windows, it is highly recommended to install WSL and Docker Desktop.</p>"},{"location":"tutorial/intro/#sample-application","title":"Sample Application","text":"<p>Open a command prompt and make a new directory:</p> <pre><code>mkdir hello\ncd hello\n</code></pre> <p>Populate with the sample application from the grpc-framework:</p> <pre><code>curl -L \\\n  https://github.com/libopenstorage/grpc-framework/archive/refs/heads/master.tar.gz | \\\n  tar xz --strip=3 \"grpc-framework-master/test/app\"\n</code></pre> <p>Run <code>go mod init</code>. See Golang: Getting Started for more information:</p> <pre><code>go mod init hello\n</code></pre> <p>Now add the grpc-framework as a dependency:</p> <pre><code>go get github.com/libopenstorage/grpc-framework@latest\n</code></pre> <p>Let golang determine the rest of the dependencies:</p> <pre><code>go mod tidy\n</code></pre> <p>Build:</p> <pre><code>make\n</code></pre> <p>Run the server:</p> <pre><code>./bin/server\n</code></pre> <p>On another terminal run the client:</p> <pre><code>./bin/client\n</code></pre>"},{"location":"tutorial/proto/","title":"Proto","text":""},{"location":"tutorial/rate-limit/","title":"Rate limit","text":""},{"location":"tutorial/rest/","title":"REST","text":""},{"location":"tutorial/server/","title":"Creating the gRPC Server","text":""},{"location":"tutorial/security/authentication/","title":"Authentication","text":""},{"location":"tutorial/security/ownership/","title":"Ownership","text":""},{"location":"tutorial/security/rbac/","title":"RBAC","text":""}]}